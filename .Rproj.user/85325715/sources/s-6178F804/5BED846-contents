source("MedTest.bin.R")
library(mvtnorm)
library(Matrix)

my.sim.binary<-function(
	nzd, 			# index for non-zero delta (the associaiton between exposure and mediators)
	n.sim=1000, 	# no. of simulation
	q1=c(10,40,0)	# 1st number for # of zero betas, 2nd for the # of positive betas, 3rd for the # of negative betas
){

	NZD<-seq(0, 0.24, 0.016)/4
	
	Beta1<-rep(0, 50)									
	Beta1[1:50]<-NZD[nzd]								# the association between exposure and mediators
	Beta2=0										# the association between exposure and outcome (conditional on mediators)
	Beta3=c(rep(0.0, q1[1]), rep(0.1*4, q1[2]), rep(-0.1*4, q1[3]))		# the association between mediators and outcome (conditional on exposures)	
	Beta4=c(rep(0.00, q1[1]), rep(0.05*4, q1[2]), rep(-0.05*4, q1[3]))	# the association between exposure-by-mediators cross-product and outcome (conditional on exposure) 
	Phi=rep(0.0, 50)									# the association between covariate and mediators
	Alpha=0.1										# the association between covariate and outcome
	
	Pval<-NULL; coef<-NULL
	for (ss in 1:n.sim){
		
		## simulation configuation
		N<-2000									# sample size
		p<-50										# # of mediators
		cov<-0.3									# correlation of errors in p mediators
		v<-matrix(cov, ncol=p, nrow=p)+diag(1-cov, p)
		set.seed(ss*1357)
		epsilon<-rmvnorm(n=N, mean=rep(0, p), v)
		
		## simulate (1) snp (or miR), (2) gene set, (3) disease outcome
		snp<-c(rep(0:1, each=N/3), rep(2, N/3))
		snp<-c(snp, rep(0, N-length(snp)))
		conf<-c(rep(0, ceiling(N/6)), rep(1, floor(N/3)), rep(0, floor(N/3)), rep(1, ceiling(N/6)))
		gset<-0.3+(conf%o%Phi+snp%o%Beta1+epsilon)
		set.seed(137*ss)
		eta<--4.5+conf*Alpha+snp*Beta2+gset%*%Beta3+(gset*snp)%*%Beta4
		prob<-exp(eta)/(1+exp(eta))
		diz<-rbinom(n=N, size=1, prob=prob)
		
		sel<-1:N
		prev<-NA
		
		## analyze the data with the proposed method
		pval<-tryCatch(IEtest.omnibus(G=gset[sel,], S=snp[sel], Y=diz[sel], X=conf[sel], pi=prev, small=FALSE, delta.only=FALSE, n.draw=1000, adaptive=FALSE), 
			error=function(e) pval<-rep(NA, 12))
		Pval<-rbind(Pval, pval)
		print(ss); flush.console()
	}
	
	power<-apply(Pval<0.05, 2, function(x) mean(x, na.rm=T))
	return(power)
	
}
	

## run the simulation
my.sim.binary(nzd=10, n.sim=50, q1=c(10,25,15))

